{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from \"zod\";\nimport { sql, db } from '@vercel/postgres';\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from \"next/navigation\";\n\nconst client = await db.connect();\nconst FormSchema = z.object({\n  id: z.string(),\n  customerId: z.string(),\n  amount: z.coerce.number(),\n  status: z.enum(['pending', 'paid']),\n  date: z.string(),\n});\n\nconst CreateInvoice = FormSchema.omit({ id: true, date: true });\n// Use Zod to update the expected types\nconst UpdateInvoice = FormSchema.omit({ id: true, date: true })\n\nexport async function createInvoice(formData: FormData) {\n  const { customerId, amount, status } = CreateInvoice.parse ({\n    customerId: formData.get('customerId'),\n    amount: formData.get('amount'),\n    status: formData.get('status'),\n  });\n  const amountInCents = amount * 100;\n  const date = new Date().toISOString().split('T')[0];\n\n  console.log(customerId+' '+date+' '+amount);\n\n  try {\n    await client.sql`\n    INSERT INTO invoices (customer_id, amount, status, date)\n    VALUES (${customerId}, ${amountInCents}, ${status}, ${date})\n  `;\n  } catch(error) {\n    // console.error('Database Error:', error);\n    return { message: 'Databse error: Failed to create invoice.'};\n  }\n//   const rawFormData = Object.fromEntries(formData.entries());\n//   console.log(rawFormData);\n  revalidatePath('/dashboard/invoices');\n  redirect('/dashboard/invoices');\n}\n\nexport async function updateInvoice(id: string, formData: FormData) {\n    const { customerId, amount, status } = UpdateInvoice.parse({\n      customerId: formData.get('customerId'),\n      amount: formData.get('amount'),\n      status: formData.get('status'),\n    });\n   \n    const amountInCents = amount * 100;\n   \n    try{\n        await client.sql`\n        UPDATE invoices\n        SET customer_id = ${customerId}, amount = ${amountInCents}, status = ${status}\n        WHERE id = ${id}\n      `;\n\n    } catch(error) {\n      return { message: 'Database error: Failed to update invoice' };\n      \n    }\n   \n    revalidatePath('/dashboard/invoices');\n    redirect('/dashboard/invoices');\n  }\n\n  export async function deleteInvoice(id: string) {\n    // throw new Error('Failed to Delete Invoice');\n\n    try {\n      await client.sql`DELETE FROM invoices WHERE id = ${id}`;\n      return { message: 'Deleted Invoice.' };\n    } catch(error) {\n        return { message: 'Database error: Failed to delete invoice.'};\n    }\n    revalidatePath('/dashboard/invoices');\n  }"],"names":[],"mappings":";;;;;;;AAGA;AACA;AACA;;AAFA;AADA;AAGA;;;;;;;AAEA,MAAM,SAAS,MAAM,kPAAA,CAAA,KAAE,CAAC,OAAO;AAC/B,MAAM,aAAa,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,qLAAA,CAAA,IAAC,CAAC,MAAM;IACZ,YAAY,qLAAA,CAAA,IAAC,CAAC,MAAM;IACpB,QAAQ,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC,MAAM;IACvB,QAAQ,qLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAO;IAClC,MAAM,qLAAA,CAAA,IAAC,CAAC,MAAM;AAChB;AAEA,MAAM,gBAAgB,WAAW,IAAI,CAAC;IAAE,IAAI;IAAM,MAAM;AAAK;AAC7D,uCAAuC;AACvC,MAAM,gBAAgB,WAAW,IAAI,CAAC;IAAE,IAAI;IAAM,MAAM;AAAK;AAEtD,eAAe,cAAc,QAAkB;IACpD,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,cAAc,KAAK,CAAE;QAC1D,YAAY,SAAS,GAAG,CAAC;QACzB,QAAQ,SAAS,GAAG,CAAC;QACrB,QAAQ,SAAS,GAAG,CAAC;IACvB;IACA,MAAM,gBAAgB,SAAS;IAC/B,MAAM,OAAO,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IAEnD,QAAQ,GAAG,CAAC,aAAW,MAAI,OAAK,MAAI;IAEpC,IAAI;QACF,MAAM,OAAO,GAAG,CAAC;;YAET,EAAE,WAAW,EAAE,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,KAAK;EAC7D,CAAC;IACD,EAAE,OAAM,OAAO;QACb,2CAA2C;QAC3C,OAAO;YAAE,SAAS;QAA0C;IAC9D;IACF,gEAAgE;IAChE,8BAA8B;IAC5B,CAAA,GAAA,sVAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,8YAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAEO,eAAe,cAAc,EAAU,EAAE,QAAkB;IAC9D,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,cAAc,KAAK,CAAC;QACzD,YAAY,SAAS,GAAG,CAAC;QACzB,QAAQ,SAAS,GAAG,CAAC;QACrB,QAAQ,SAAS,GAAG,CAAC;IACvB;IAEA,MAAM,gBAAgB,SAAS;IAE/B,IAAG;QACC,MAAM,OAAO,GAAG,CAAC;;0BAEC,EAAE,WAAW,WAAW,EAAE,cAAc,WAAW,EAAE,OAAO;mBACnE,EAAE,GAAG;MAClB,CAAC;IAEH,EAAE,OAAM,OAAO;QACb,OAAO;YAAE,SAAS;QAA2C;IAE/D;IAEA,CAAA,GAAA,sVAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,8YAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAEO,eAAe,cAAc,EAAU;IAC5C,+CAA+C;IAE/C,IAAI;QACF,MAAM,OAAO,GAAG,CAAC,gCAAgC,EAAE,GAAG,CAAC;QACvD,OAAO;YAAE,SAAS;QAAmB;IACvC,EAAE,OAAM,OAAO;QACX,OAAO;YAAE,SAAS;QAA2C;IACjE;IACA,CAAA,GAAA,sVAAA,CAAA,iBAAc,AAAD,EAAE;AACjB;;;IA7DoB;IA0BA;IAyBE;;AAnDF,wcAAA;AA0BA,wcAAA;AAyBE,wcAAA"}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/.next-internal/server/app/dashboard/invoices/[id]/edit/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n  '344e743686735202b1d7d8cdb5a2ba161e7f837f': (...args) => Promise.resolve(require('ACTIONS_MODULE0')).then(mod => (0, mod['createInvoice'])(...args)),\n  '9f9b112f9b8e50a0388c8a6e4f075faaa288ec94': (...args) => Promise.resolve(require('ACTIONS_MODULE0')).then(mod => (0, mod['updateInvoice'])(...args)),\n  'fdda32d133c9013289279e5c6922829d9811e4ab': (...args) => Promise.resolve(require('ACTIONS_MODULE0')).then(mod => (0, mod['deleteInvoice'])(...args)),\n});"],"names":[],"mappings":"AAAA,2BAA2B;IACzB,4CAA4C,CAAC,GAAG,OAAS,QAAQ,OAAO,+EAA6B,IAAI,CAAC,CAAA,MAAO,CAAC,GAAG,GAAG,CAAC,gBAAgB,KAAK;IAC9I,4CAA4C,CAAC,GAAG,OAAS,QAAQ,OAAO,+EAA6B,IAAI,CAAC,CAAA,MAAO,CAAC,GAAG,GAAG,CAAC,gBAAgB,KAAK;IAC9I,4CAA4C,CAAC,GAAG,OAAS,QAAQ,OAAO,+EAA6B,IAAI,CAAC,CAAA,MAAO,CAAC,GAAG,GAAG,CAAC,gBAAgB,KAAK;AAChJ"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}